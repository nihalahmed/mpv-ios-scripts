--- src/mpv-0.35.1/bootstrap.py
+++ src/mpv-0.35.1/bootstrap.py
@@ -5,10 +5,10 @@
 import os, sys, stat, hashlib, subprocess
 from urllib.request import urlopen, URLError
 
-WAFRELEASE = "waf-2.0.24"
+WAFRELEASE = "waf-2.0.15"
 WAFURLS    = ["https://waf.io/" + WAFRELEASE,
               "https://www.freehackers.org/~tnagy/release/" + WAFRELEASE]
-SHA256HASH = "93909bca823a675f9f40af7c65b24887c3a3c0efdf411ff1978ba827194bdeb0"
+SHA256HASH = "34b8156ea375089e1bed5a31acfaff4024f6f3e96f3bee98f801f0c281ad3d2c"
 
 if os.path.exists("waf"):
     wafver = subprocess.check_output([sys.executable, './waf', '--version']).decode()
--- src/mpv-0.35.1/wscript
+++ src/mpv-0.35.1/wscript
@@ -245,6 +245,12 @@ iconv support use --disable-iconv.",
         'desc': 'w32/dos paths',
         'deps': 'os-win32 || os-cygwin',
         'func': check_true
+    }, {
+        'name': 'posix-spawn',
+        'desc': 'spawnp()/kill() POSIX support',
+        'func': check_statement(['spawn.h', 'signal.h'],
+            'posix_spawnp(0,0,0,0,0,0); kill(0,0)'),
+        'deps': '!mingw && !tvos',
     }, {
         'name': 'glob-posix',
         'desc': 'glob() POSIX support',
--- src/mpv-0.35.1/wscript_build.py
+++ src/mpv-0.35.1/wscript_build.py
@@ -209,7 +209,7 @@ def build(ctx):
     ])
 
     subprocess_c = ctx.pick_first_matching_dep([
-        ( "osdep/subprocess-posix.c",            "posix" ),
+        ( "osdep/subprocess-posix.c",            "posix-spawn" ),
         ( "osdep/subprocess-win.c",              "win32-desktop" ),
         ( "osdep/subprocess-dummy.c" ),
     ])
--- src/ffmpeg-6.0/libavfilter/metal/utils.m
+++ src/ffmpeg-6.0/libavfilter/metal/utils.m
@@ -31,7 +31,7 @@ void ff_metal_compute_encoder_dispatch(id<MTLDevice> device,
     BOOL fallback = YES;
     // MAC_OS_X_VERSION_10_15 is only defined on SDKs new enough to include its functionality (including iOS, tvOS, etc)
 #ifdef MAC_OS_X_VERSION_10_15
-    if (@available(macOS 10.15, iOS 11, tvOS 14.5, *)) {
+    if (@available(macOS 10.15, iOS 13, tvOS 14.5, *)) {
         if ([device supportsFamily:MTLGPUFamilyCommon3]) {
             MTLSize threadsPerGrid = MTLSizeMake(width, height, 1);
             [encoder dispatchThreads:threadsPerGrid threadsPerThreadgroup:threadsPerThreadgroup];
